openapi: 3.0.0
info:
  version: "1.3"
  title: 'Pichi API'
  description: 'RESTful API for pichi server'
tags:
  - name: 'Pichi API'
    description: 'Pichi API'
paths:
  /ingresses:
    get:
      description: 'Get all available ingresses'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available ingresses'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Ingress'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /ingresses/{name}:
    put:
      description: 'Create or modify an ingress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Ingress name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingress'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '423':
          description: 'Address in use'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified ingress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Ingress name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /egresses:
    get:
      description: 'Get all available egresses'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available ingresses'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Egress'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /egresses/{name}:
    put:
      description: 'Create or modify an egress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'egress name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Egress'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified egress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Egress name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '403':
          description: 'Egress is used by route'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /rules:
    get:
      description: 'Get all available rules'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available rules'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Rule'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /rules/{name}:
    put:
      description: 'Create or modify a rule'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'rule name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified rule'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Rule name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '403':
          description: 'Rule is used by route'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /route:
    get:
      description: 'Show Pichi routes'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'Routes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      description: 'Change rule order or default egress'
      tags:
        - 'Pichi API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Error message in detail'
    AdapterType:
      type: string
      enum:
        - http
        - socks5
        - ss
    CryptoMethod:
      description: 'SS method'
      type: string
      enum:
        - rc4-md5
        - bf-cfb
        - aes-128-ctr
        - aes-192-ctr
        - aes-256-ctr
        - aes-128-cfb
        - aes-192-cfb
        - aes-256-cfb
        - camellia-128-cfb
        - camellia-192-cfb
        - camellia-256-cfb
        - chacha20
        - salsa20
        - chacha20-ietf
        - aes-128-gcm
        - aes-192-gcm
        - aes-256-gcm
        - chacha20-ietf-poly1305
        - xchacha20-ietf-poly1305
    Rule:
      type: object
      properties:
        range:
          description: 'IP range array'
          type: array
          items:
            type: string
            example: 'fc00::/7'
        ingress_name:
          description: 'ingress name array'
          type: array
          items:
            type: string
            example: 'my_socks5_server'
        ingress_type:
          description: 'ingress type array'
          type: array
          items:
            $ref: '#/components/schemas/AdapterType'
        pattern:
          description: 'Remote server address pattern'
          type: array
          items:
            type: string
            example: '^.*\.example.com$'
        domain:
          description: 'Remote server domain name'
          type: array
          items:
            type: string
            example: 'example.com'
        country:
          description: 'Remote server country'
          type: array
          items:
            type: string
            example: 'US'
    Route:
      type: object
      properties:
        default:
          description: 'Default egress name'
          type: string
          example: 'default_egress'
        rules:
          description: 'Active rules in order'
          type: array
          items:
            type: array
            minLength: 2
            items:
              type: string
            example: ['rule_0', 'rule_1', 'egress_0']
    Host:
      description: "IP(v4/v6) address or domain name"
      type: string
      example: "1.1.1.1"
    Port:
      description: "TCP port"
      type: integer
      format: int32
      minimum: 1
      maximum: 65535
      example: 8388
    LocalEndpoint:
      properties:
        bind:
          $ref: "#/components/schemas/Host"
        port:
          $ref: "#/components/schemas/Port"
      required:
        - bind
        - port
    RemoteEndpoint:
      properties:
        host:
          $ref: "#/components/schemas/Host"
        port:
          $ref: "#/components/schemas/Port"
      required:
        - host
        - port
    Credentials:
      description: "Username and password pairs"
      type: object
      additionalProperties:
        type: string
        description: "Password"
    Credential:
      description: "Username and password pair"
      type: array
      minLength: 2
      maxLength: 2
      items:
        type: string
        example: "username / password"
    TunnelIngress:
      description: "Tunnel ingress"
      type: object
      properties:
        type:
          type: string
          enum:
            - tunnel
        destinations:
          description: "Destination endpoints"
          example: {"dst_0":80,"dst_1":80}
          type: object
          additionalProperties:
            type: integer
          minProperties: 1
        balance:
          type: string
          enum:
            - random
            - round_robin
            - least_conn
      required:
        - type
        - destinations
        - balance
    HttpOrSocks5Ingress:
      description: "HTTP(s) or Socks5(s) ingress"
      type: object
      properties:
        type:
          type: string
          enum:
            - http
            - socks5
        credentials:
          $ref: "#/components/schemas/Credentials"
        tls:
          type: boolean
          description: "Whether TLS is enabled"
          default: false
          example: false
        cert_file:
          description: "TLS certification file path"
          type: string
          example: "/etc/cert/cert.pem"
        key_file:
          description: "TLS private key file path"
          type: string
          example: "/etc/cert/privkey.pem"
      required:
        - type
        - tls
    HttpOrSocks5Egress:
      description: "HTTP(s) or Socks5(s) egress"
      type: object
      properties:
        type:
          type: string
          enum:
            - http
            - socks5
        credential:
          $ref: "#/components/schemas/Credential"
        tls:
          type: boolean
          description: "Whether TLS is enabled"
          default: false
          example: false
        insecure:
          description: "Whether to verify the peer certificate"
          type: boolean
          default: true
          example: true
        ca_file:
          description: "CA file path"
          type: string
          example: "/etc/cert/ca.pem"
      required:
        - type
        - tls
    SSAdapter:
      description: "Shadowsocks adapter"
      type: object
      properties: 
        type:
          type: string
          enum:
            - ss
        method:
          $ref: '#/components/schemas/CryptoMethod'
        password:
          description: 'SS psk'
          type: string
          example: 'ss password'
      required:
        - type
        - method
        - password
    RejectEgress:
      description: "Reject egress"
      type: object
      properties:
        type:
          type: string
          enum:
            - reject
        mode:
          type: string
          description: 'Delay mode for reject egress'
          enum:
            - random
            - fixed
          default: 'fixed'
          example: 'random'
        delay:
          type: integer
          description: 'Seconds delayed before rejecting connection'
          default: 0
          minimum: 0
          maximum: 300
      required:
        - type
        - mode
    DirectEgress:
      description: "Direct egress"
      type: object
      properties:
        type:
          type: string
          enum:
            - direct
      required:
        - type
    Ingress:
      allOf:
        - $ref: "#/components/schemas/LocalEndpoint"
        - oneOf:
          - $ref: "#/components/schemas/TunnelIngress"
          - $ref: "#/components/schemas/HttpOrSocks5Ingress"
          - $ref: "#/components/schemas/SSAdapter"
    Egress:
      oneOf:
        - $ref: "#/components/schemas/DirectEgress"
        - $ref: "#/components/schemas/RejectEgress"
        - allOf:
          - $ref: "#/components/schemas/RemoteEndpoint"
          - oneOf:
            - $ref: "#/components/schemas/HttpOrSocks5Egress"
            - $ref: "#/components/schemas/SSAdapter"