language: cpp
sudo: false

env:
  global:
    - TMP=/tmp
    - IOS_ROOT=${TMP}/iphoneos
    - ANDROID_ROOT=${TMP}/android
    - IOS_TOOLCHAIN_URL=https://raw.githubusercontent.com/leetal/ios-cmake/3.0.1/ios.toolchain.cmake
    - IOS_TOOLCHAIN_FILE=${IOS_ROOT}/ios.cmake
    - NDK_URL=https://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip
    - NDK_ROOT=${TMP}/android-ndk-r18b
    - BOOST_URL=https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.gz
    - BOOST_ROOT=${TMP}/boost_1_67_0
    - MBEDTLS_URL=https://tls.mbed.org/download/mbedtls-2.7.0-apache.tgz
    - MBEDTLS_SRC=${TMP}/mbedtls-2.7.0
    - SODIUM_URL=https://github.com/jedisct1/libsodium/releases/download/1.0.12/libsodium-1.0.12.tar.gz
    - SODIUM_SRC=${TMP}/libsodium-1.0.12
    - MMDB_URL=https://github.com/maxmind/libmaxminddb/releases/download/1.3.0/libmaxminddb-1.3.0.tar.gz
    - MMDB_SRC=${TMP}/libmaxminddb-1.3.0
    - RJ_URL=https://github.com/Tencent/rapidjson/archive/v1.1.0.tar.gz
    - RJ_SRC=${TMP}/rapidjson-1.1.0

cache:
  directories:
  - ${IOS_ROOT}
  - ${ANDROID_ROOT}

matrix:
  include:
    - name: iPhone OS 12.1 / Xcode 11
      os: osx
      osx_image: xcode11
      addons:
        homebrew:
          packages:
            - rapidjson
      env:
        - ADDRESS_MODEL=64
        - PLATFORM=iphoneos
        - PARALLEL="$(sysctl -n hw.physicalcpu)"
    - name: Android 9 / NDK r18b
      os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - g++
      env:
        - ADDRESS_MODEL=64
        - PLATFORM=android-28
        - PARALLEL="$(nproc)"
    - name: Alpine 3.8 / G++ 8 (static)
      os: linux
      services:
        - docker
      env:
        - PLATFORM=alpine
        - PARALLEL="$(nproc)"
        - STATIC_LINK=ON
    - name: Alpine 3.8 / G++ 8 (shared)
      os: linux
      services:
        - docker
      env:
        - PLATFORM=alpine
        - PARALLEL="$(nproc)"
        - STATIC_LINK=OFF
    - name: macOS 10.14 / Xcode 11 (static)
      os: osx
      osx_image: xcode11
      addons:
        homebrew:
          packages:
            - boost
            - mbedtls
            - libsodium
            - libmaxminddb
            - openssl
            - rapidjson
      env:
        - PLATFORM=osx
        - STATIC_LINK=ON
        - PARALLEL="$(sysctl -n hw.physicalcpu)"
    - name: macOS 10.14 / Xcode 11 (shared)
      os: osx
      osx_image: xcode11
      addons:
        homebrew:
          packages:
            - boost
            - mbedtls
            - libsodium
            - libmaxminddb
            - openssl
            - rapidjson
      env:
        - PLATFORM=osx
        - STATIC_LINK=ON
        - PARALLEL="$(sysctl -n hw.physicalcpu)"

install:
  - |
    if [ "${PLATFORM}" = "alpine" ]; then
      docker build --rm --no-cache -t pichi/builder -f docker/builder.dockerfile .
    fi
  - |
    if [ "${PLATFORM}" = "iphoneos" ] && [ ! -f "${IOS_ROOT}/.cached" ]; then
      rm -rf "${IOS_ROOT}" &&
      curl -LSs "${BOOST_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSs "${MBEDTLS_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSs "${SODIUM_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSs "${MMDB_URL}" | tar zxf - -C "${TMP}" &&
      bash "${TRAVIS_BUILD_DIR}/deps-build/boost.sh" "${BOOST_ROOT}" &&
      curl -LSso "${IOS_TOOLCHAIN_FILE}" "${IOS_TOOLCHAIN_URL}" &&
      mkdir -p "${MBEDTLS_SRC}/build" && cd "${MBEDTLS_SRC}/build" &&
      cmake -D CMAKE_INSTALL_PREFIX="${IOS_ROOT}" -D CMAKE_BUILD_TYPE=MinSizeRel \
        -D CMAKE_TOOLCHAIN_FILE="${IOS_TOOLCHAIN_FILE}" -D IOS_PLATFORM=OS \
        -D ENABLE_PROGRAMS=OFF -D ENABLE_TESTING=OFF "${MBEDTLS_SRC}" &&
      make -j "${PARALLEL}" install &&
      mkdir -p "${SODIUM_SRC}/build" && cd "${SODIUM_SRC}/build" &&
      cp "${TRAVIS_BUILD_DIR}/deps-build/libsodium.cmake" "${SODIUM_SRC}/CMakeLists.txt" &&
      cmake -D CMAKE_INSTALL_PREFIX="${IOS_ROOT}" -D CMAKE_BUILD_TYPE=MinSizeRel \
        -D CMAKE_TOOLCHAIN_FILE="${IOS_TOOLCHAIN_FILE}" -D IOS_PLATFORM=OS \
        "${SODIUM_SRC}" &&
      make -j "${PARALLEL}" install &&
      mkdir -p "${MMDB_SRC}/build" && cd "${MMDB_SRC}/build" &&
      cp "${TRAVIS_BUILD_DIR}/deps-build/libmaxminddb.cmake" "${MMDB_SRC}/CMakeLists".txt &&
      cmake -D CMAKE_INSTALL_PREFIX="${IOS_ROOT}" -D CMAKE_BUILD_TYPE=MinSizeRel \
        -D CMAKE_TOOLCHAIN_FILE="${IOS_TOOLCHAIN_FILE}" -D IOS_PLATFORM=OS \
        "${MMDB_SRC}" &&
      make -j "${PARALLEL}" install &&
      cp -r "$(brew --prefix)/opt/rapidjson/include/rapidjson" "${IOS_ROOT}/include" &&
      cd "${TRAVIS_BUILD_DIR}" &&
      touch "${IOS_ROOT}/.cached"
    fi
  - |
    if [ "${PLATFORM}" = "android-28" ] && [ ! -f "${ANDROID_ROOT}/.cached" ]; then
      rm -rf "${ANDROID_ROOT}" &&
      curl -LSs "${BOOST_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSs "${MBEDTLS_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSs "${SODIUM_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSs "${MMDB_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSs "${RJ_URL}" | tar zxf - -C "${TMP}" &&
      curl -LSso "${TMP}/ndk.zip" "${NDK_URL}" &&
      unzip -qd "${TMP}" "${TMP}/ndk.zip" &&
      python "${NDK_ROOT}/build/tools/make_standalone_toolchain.py" --arch arm64 \
        --api 28 --stl libc++ --install-dir "${ANDROID_ROOT}" &&
      bash deps-build/boost.sh "${BOOST_ROOT}" &&
      mkdir -p "${MBEDTLS_SRC}/build" && cd "${MBEDTLS_SRC}/build" &&
      cmake -D CMAKE_INSTALL_PREFIX="${ANDROID_ROOT}/sysroot" \
        -D CMAKE_SYSROOT="${ANDROID_ROOT}/sysroot" \
        -D CMAKE_C_COMPILER="${ANDROID_ROOT}/bin/clang" \
        -D CMAKE_BUILD_TYPE=MinSizeRel \
        -D ENABLE_PROGRAMS=OFF -D ENABLE_TESTING=OFF "${MBEDTLS_SRC}" &&
      make -j "${PARALLEL}" install &&
      mkdir -p "${SODIUM_SRC}/build" && cd "${SODIUM_SRC}/build" &&
      cp "${TRAVIS_BUILD_DIR}/deps-build/libsodium.cmake" "${SODIUM_SRC}/CMakeLists.txt" &&
      cmake -D CMAKE_INSTALL_PREFIX="${ANDROID_ROOT}/sysroot" \
        -D CMAKE_SYSROOT="${ANDROID_ROOT}/sysroot" \
        -D CMAKE_C_COMPILER="${ANDROID_ROOT}/bin/clang" \
        -D CMAKE_BUILD_TYPE=MinSizeRel -D BUILD_SHARED=OFF "${SODIUM_SRC}" &&
      make -j "${PARALLEL}" install &&
      mkdir -p "${MMDB_SRC}/build" && cd "${MMDB_SRC}/build" &&
      cp "${TRAVIS_BUILD_DIR}/deps-build/libmaxminddb.cmake" "${MMDB_SRC}/CMakeLists".txt &&
      cmake -D CMAKE_INSTALL_PREFIX="${ANDROID_ROOT}/sysroot" \
        -D CMAKE_SYSROOT="${ANDROID_ROOT}/sysroot" \
        -D CMAKE_C_COMPILER="${ANDROID_ROOT}/bin/clang" \
        -D CMAKE_BUILD_TYPE=MinSizeRel -D BUILD_SHARED=OFF "${MMDB_SRC}" &&
      make -j "${PARALLEL}" install &&
      mv "${RJ_SRC}/include/rapidjson" "${ANDROID_ROOT}/sysroot/include" &&
      cd "${TRAVIS_BUILD_DIR}" &&
      touch "${ANDROID_ROOT}/.cached"
    fi

script:
  - rm -rf build
  - mkdir -p build
  - cd build
  - |
    case "${PLATFORM}" in
      "alpine")
        docker run --rm -v "${TRAVIS_BUILD_DIR}:/root/pichi" -w /root/pichi/build \
          pichi/builder cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DSTATIC_LINK="${STATIC_LINK}" \
          /root/pichi &&
        docker run --rm -v "${TRAVIS_BUILD_DIR}:/root/pichi" -w /root/pichi/build \
          pichi/builder make -j "${PARALLEL}" &&
        docker run --rm -v "${TRAVIS_BUILD_DIR}:/root/pichi" -w /root/pichi/build \
          pichi/builder ctest --output-on-failure;;
      "osx")
        cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DSTATIC_LINK="${STATIC_LINK}" \
          -DCMAKE_CXX_COMPILER="clang++" -DOPENSSL_ROOT_DIR="$(brew --prefix)/opt/openssl" \
          "${TRAVIS_BUILD_DIR}" &&
        make -j "${PARALLEL}" &&
        ctest --output-on-failure;;
      "iphoneos")
        cmake -D CMAKE_INSTALL_PREFIX="${IOS_ROOT}" -D CMAKE_SYSROOT="${IOS_ROOT}" \
          -D CMAKE_TOOLCHAIN_FILE="${IOS_TOOLCHAIN_FILE}" -D IOS_PLATFORM=OS \
          -D CMAKE_BUILD_TYPE=MinSizeRel -D BUILD_SERVER=OFF -D BUILD_TEST=OFF \
          -D ENABLE_TLS=OFF "${TRAVIS_BUILD_DIR}" &&
        make -j "${PARALLEL}";;
      "android-28")
        cmake -D CMAKE_INSTALL_PREFIX="${ANDROID_ROOT}/sysroot" \
          -D CMAKE_SYSROOT="${ANDROID_ROOT}/sysroot" -D ENABLE_TLS=OFF \
          -D CMAKE_CXX_COMPILER="${ANDROID_ROOT}/bin/clang++" -D CMAKE_BUILD_TYPE=MinSizeRel \
          -D BUILD_SERVER=OFF -D BUILD_TEST=OFF -D STATIC_LINK=OFF "${TRAVIS_BUILD_DIR}" &&
        make -j "${PARALLEL}";;
      "*")
        ;;
    esac

notifications:
  email: false
